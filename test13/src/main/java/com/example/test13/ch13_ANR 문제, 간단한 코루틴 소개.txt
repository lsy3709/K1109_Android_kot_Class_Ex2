ANR 문제 코루틴 소개
ANR(Activity Not Response)
액티비티로 구성한 앱 화면은 사용자 이벤트에 빠르게 반응 해야함.
(백쪽에 응답하는 속도 희망 속도 :200ms ~ 300ms,
 만약 조금 느려도 500ms ~ 1000ms 이사이 정도로 만들자. )

액티비티가 사용자 이벤트에 5초 이내에 반응하지 않으면 ANR 문제가 발생.
액티비티에서 사용자 이벤트를 처리하지 못하는 이유는
액티비티를 실행한 시스템에서 발생한 수행흐름에서 이벤트를 처리를 못하기 때문.
예) 오래 걸리는 작업을 , 메인스레드(UI스레드) , 사용자가 직접 처리 못하므로.
예2) 계산을 20억 정도 더하는 작업 중에, 화면에 에디트텍스트 뷰를 클릭해도 무반응.

참고)
시간이 오래 걸리는 작업을 서비스 컴포넌트로 처리하면 안되냐?
물론 가능함. 서비스가 하는 역할 백에서 작업을 진행하는 부분이.
액티비티 작업 : 화면을 출력하는 부분.
좋은 방법은 아니다.
화면에 담당하는 부분이 아무리 오래 걸려도, 액티비가 담당해야한다.

코루틴 소개 (코틀린이)
1.1 버전부터 코루틴을 지원하기 시작했고,
1.3 버전 부터 공식으로 지원.
coroutine -> co: 함께,
routine -> 작업 처리.
함께 작업 처리 한다라는 의미 정도.
-> 비동기 처리 방식과 같다.

스레드-핸들러 방식으로 처리하고 있는데, API30 레베에서 deprecated 가 되어서
방식 만 보고, 넘어가자.

일단, 간단한 코루틴 설정만 확인을 하고 넘어감.
코드는
샘플 코드

작업 크게 2분류로, 하나 : 백, 두번째 : 메인
스코프를 디스패처로 정의.
디스패처(Dispatchers)
 : 각 스코프에서 구동한 코루틴이 어디에서 동작하는지를 나타내기 위해서.

Dispatchers.Main 는 메인 스레드에서 동작함.
결론, UI 를 변경 가능.
사용자 이벤트를 처리도하고(화면 그리는 작업),
빨리 끝나는 작업(오래걸린 작업의 결괏값을 뷰에 붙이는 작업.)을 맡기는게 좋다.

Dispatchers.Default
오래 걸리는 작업.

Channel 이라는 부분은 큐 알고리즘(First In First Out) 비슷.
Channel 의 send() 함수로 데이터를 전달하면
이 데이터를 받는 코루틴에서 receive() , consumeEach() 함수 등으로
데이터를 받는다.



val channel = Channel<Int>()

val backgroundScope = CoroutineScope(Dispatchers.Default + Job())
backgroundScope.launch {
	var sum = 0L
	var time = measureTimeMillis {
		for (i in 1..2_000_000_000) {
			sum += i
		}
	}
	Log.d("kkang", "time : $time")
	channel.send(sum.toInt())
}

val mainScope= GlobalScope.launch(Dispatchers.Main) {
	channel.consumeEach {
		binding.resultView.text = "sum : $it"
	}
}